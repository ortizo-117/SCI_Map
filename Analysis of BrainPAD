import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from scipy import stats
from itertools import combinations
from cliffs_delta import cliffs_delta

 
PyB_path = "/path/to/your/predicted_results.xlsx"  # Path to your predicted brain age results in Excel format
output_path1 = "/path/to/output/summary_statistics.csv" # Path where you want to save the summary statistics
output_path2 = "/path/to/output/BrainPAD_comparison.png"  # Path where you want to save the plot for BrainPAD across cohorts
output_path3 = "/path/to/output/Chronological_vs_BrainAge.png"# Path where you want to save the plot for Chronological Age vs Predicted Brain Age (PyBrain)
output_path4 = "/path/to/output/BrainPAD_vs_Age.png"# Path where you want to save the plot for BrainPAD vs Age
output_path5 = "/path/to/output/BrainPAD_across_sex.png" # Path where you want to save the results for Group Comparisons
output_path6 = "/path/to/output/BrainPAD_vs_TimeSinceInjury.png" # Path where you want to save the results for Group Comparisons
output_path7 = "/path/to/output/BrainPAD_across_cohorts.csv" # Path where you want to save the results for Group Comparisons
output_path8 = "/path/to/output/BrainPAD_across_sex.csv" # Path where you want to save the results for Group Comparisons
df_pybrain = pd.read_excel(PyB_path)
# Ensure relevant columns are numeric if they exist
for col in ["Age", "BrainPAD", "BrainAge"]:
    if col in df_pybrain.columns:
        df_pybrain[col] = pd.to_numeric(df_pybrain[col], errors="coerce")

# Define cohorts
cohort_order = ["control", "SCI_nNP", "SCI_P"]

# Create empty list to store summary data
summary_results = []

# Loop through each cohort to calculate summary statistics
for cohort in cohort_order:
    subset = df_pybrain[df_pybrain["Cohort"] == cohort]

    # Calculate statistics (only if column exists)
    num_participants = len(subset)
    mean_age = subset["Age"].mean() if "Age" in subset.columns else np.nan
    std_age = subset["Age"].std() if "Age" in subset.columns else np.nan
    mean_brainpad = subset["BrainPAD"].mean() if "BrainPAD" in subset.columns else np.nan
    std_brainpad = subset["BrainPAD"].std() if "BrainPAD" in subset.columns else np.nan
    mean_brainage = subset["BrainAge"].mean() if "BrainAge" in subset.columns else np.nan
    std_brainage = subset["BrainAge"].std() if "BrainAge" in subset.columns else np.nan

    # Gender distribution (only if column exists)
    num_male = sum(subset["Sex"] == "Male") if "Sex" in subset.columns else np.nan
    num_female = sum(subset["Sex"] == "Female") if "Sex" in subset.columns else np.nan

    # AIS distribution (only if column exists)
    ais_distribution = subset["AIS"].value_counts().to_dict() if "AIS" in subset.columns else "Not Available"

    # Additional columns (check if they exist)
    time_since_sci_mean = subset["Time since SCI (years) "].mean() if "Time since SCI (years) " in subset.columns else np.nan
    pain_meds_count = subset["pain meds"].value_counts().to_dict() if "pain meds" in subset.columns else "Not Available"
    pcs_mean = subset["PCS"].mean() if "PCS" in subset.columns else np.nan
    bdi_mean = subset["BDI"].mean() if "BDI" in subset.columns else np.nan

    # Store results
    summary_results.append([
        cohort, num_participants, mean_age, std_age, mean_brainpad, std_brainpad,
        mean_brainage, std_brainage, num_male, num_female, ais_distribution,
        time_since_sci_mean, pain_meds_count, pcs_mean, bdi_mean
    ])

# Convert to DataFrame
df_summary = pd.DataFrame(summary_results, columns=[
    "Cohort", "Participants", "Mean Age", "SD Age", "Mean BrainPAD", "SD BrainPAD",
    "Mean BrainAge", "SD BrainAge", "Num Male", "Num Female", "AIS Distribution",
    "Mean Time Since SCI", "Pain Meds Distribution", "Mean PCS", "Mean BDI"
])

# Save summary statistics as CSV
df_summary.to_csv(output_path1, index=False)


###Boxplot for BrainPAD across cohorts 
# Define cohort colors
cohort_palette = {
    "control": "#AEC6E8",  # Light Blue
    "SCI_nNP": "#FFCC99",  # Light Oetange
    "SCI_P": "#99D8A0"     # Light Green
}

# Create the boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x="Cohort", y="BrainPAD", data=df_pybrain, palette=cohort_palette, showfliers=False, width=0.6, boxprops={'alpha': 0.5})

# Add individual data points (stripplot)
sns.stripplot(x="Cohort", y="BrainPAD", data=df_pybrain, color="black", jitter=True, size=6, alpha=0.7)

# Add mean values as triangles
means = df_pybrain.groupby("Cohort")["BrainPAD"].mean()
for i, cohort in enumerate(df_pybrain["Cohort"].unique()):
    plt.scatter(i, means[cohort], color="black", marker="^", s=100, label="Mean" if i == 0 else "")

# Set labels & title
plt.title("BrainPAD Comparison Across Cohorts", fontsize=16, fontweight="bold")
plt.xlabel("Cohort", fontsize=14, fontweight="bold")
plt.ylabel("BrainPAD", fontsize=14, fontweight="bold")
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title="Statistics", loc="upper right")

# Display plot
plt.grid(alpha=0.3)
plt.tight_layout()
plt.savefig(output_path2)


### Scatter plot: Chronological Age vs. Predicted Brain Age (PyBrain)
# Create scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x="Age", y="BrainAge", hue="Cohort", data=df_pybrain, palette=cohort_palette, alpha=0.7, s=70, edgecolor="black")

# Add perfect prediction reference line (y = x)
plt.plot([df_pybrain["Age"].min(), df_pybrain["Age"].max()],
         [df_pybrain["Age"].min(), df_pybrain["Age"].max()],
         'k--', alpha=0.8)

# Set labels & title
plt.title("Chronological Age vs. Predicted Brain Age (PyBrain)", fontsize=16, fontweight="bold")
plt.xlabel("Chronological Age", fontsize=14, fontweight="bold")
plt.ylabel("Predicted Brain Age", fontsize=14, fontweight="bold")
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title="Cohort", loc="upper left")

plt.savefig(output_path3)


###BrainPAD Across Age and different cohorts 
# Create scatterplot
plt.figure(figsize=(10, 6))

# Add trend lines for each cohort
sns.lmplot(data=df_pybrain, x="Age", y="BrainPAD", hue="Cohort", palette=cohort_palette, ci=None, height=6, aspect=1.5)

# Labels & title
plt.xlabel("Age (Years)", fontsize=14, fontweight="bold")
plt.ylabel("BrainPAD", fontsize=14, fontweight="bold")
plt.title("BrainPAD vs Age Across Cohorts", fontsize=16, fontweight="bold")
plt.legend(title="Cohort", loc="upper right")
plt.grid(alpha=0.3)
plt.savefig(output_path4)

#BrainPAD across sex 
# Filter Data by Sex
df_female = df_pybrain[df_pybrain["Sex"] == "Female"]
df_male = df_pybrain[df_pybrain["Sex"] == "Male"]

#Define Cohorts
cohort_order = ["control", "SCI_nNP", "SCI_P"]
cohort_palette = {"control": "#AEC6E8", "SCI_nNP": "#FFCC99", "SCI_P": "#99D8A0"}


# Visualization: BrainPAD Comparisons by Sex*Â¨
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(14, 6), sharey=True)

#Plot for Female
sns.boxplot(x="Cohort", y="BrainPAD", data=df_female, order=cohort_order, palette=cohort_palette,
            showfliers=False, width=0.6, ax=axes[0])
sns.stripplot(x="Cohort", y="BrainPAD", data=df_female, hue="Cohort", order=cohort_order, jitter=True,
              size=8, alpha=0.7, color="black", ax=axes[0])
axes[0].set_title("BrainPAD - Female", fontsize=14, fontweight="bold")
axes[0].set_xlabel("Cohorts", fontsize=12, fontweight="bold")
axes[0].set_ylabel("BrainPAD", fontsize=12, fontweight="bold")

#Plot for Male
sns.boxplot(x="Cohort", y="BrainPAD", data=df_male, order=cohort_order, palette=cohort_palette,
            showfliers=False, width=0.6, ax=axes[1])
sns.stripplot(x="Cohort", y="BrainPAD", data=df_male, hue="Cohort", order=cohort_order, jitter=True,
              size=8, alpha=0.7,color="black" , ax=axes[1])
axes[1].set_title("BrainPAD - Male", fontsize=14, fontweight="bold")
axes[1].set_xlabel("Cohorts", fontsize=12, fontweight="bold")

# Adjust layout & save
plt.suptitle("BrainPAD Comparison by Cohort (Separated by Sex)", fontsize=16, fontweight="bold")
plt.tight_layout()
plt.savefig(output_path5)


#BrainPAD vs Time Since Injury (SCI Particpants)
# **Filter dataset for SCI participants only**
df_sci = df_pybrain[df_pybrain["Cohort"].isin(["SCI_nNP", "SCI_P"])].copy()

# **Rename column to remove trailing space**
df_sci.rename(columns={"Time since SCI (years) ": "Time since SCI (years)"}, inplace=True)

# **Drop NaN values in "Time since SCI" and "BrainPAD"**
df_sci = df_sci[["Time since SCI (years)", "BrainPAD", "Cohort"]].dropna()

# **Convert "Time since SCI" to numeric (if needed)**
df_sci["Time since SCI (years)"] = pd.to_numeric(df_sci["Time since SCI (years)"], errors="coerce")

# **Check if there are enough data points**
if len(df_sci) < 3:
    print("Not enough data for correlation analysis.")
    corr_coef, p_value, correlation_type = None, None, "No Analysis"
else:
    # **Check normality (only if there are at least 3 unique values)**
    if len(df_sci["Time since SCI (years)"].unique()) > 2 and len(df_sci["BrainPAD"].unique()) > 2:
        shapiro_time = stats.shapiro(df_sci["Time since SCI (years)"])[1]  # p-value
        shapiro_brainpad = stats.shapiro(df_sci["BrainPAD"])[1]  # p-value

        # **Decide whether to use Pearson or Spearman correlation**
        if shapiro_time > 0.05 and shapiro_brainpad > 0.05:
            correlation_type = "Pearson"
            corr_coef, p_value = stats.pearsonr(df_sci["Time since SCI (years)"], df_sci["BrainPAD"])
        else:
            correlation_type = "Spearman"
            corr_coef, p_value = stats.spearmanr(df_sci["Time since SCI (years)"], df_sci["BrainPAD"])
    else:
        correlation_type = "No Analysis"
        corr_coef, p_value = None, None

# **Define cohort colors**
cohort_palette = {"SCI_nNP": "#FFCC99", "SCI_P": "#99D8A0"}  # Light orange & green

# **Create scatter plot**
plt.figure(figsize=(10, 6))
sns.scatterplot(x="Time since SCI (years)", y="BrainPAD", hue="Cohort",
                data=df_sci, palette=cohort_palette, s=70, alpha=0.8, edgecolor="black")

# **Add trend lines for each cohort**
sns.regplot(x="Time since SCI (years)", y="BrainPAD", data=df_sci[df_sci["Cohort"] == "SCI_nNP"],
            scatter=False, color="#FFCC99", line_kws={"linestyle": "--", "linewidth": 2})
sns.regplot(x="Time since SCI (years)", y="BrainPAD", data=df_sci[df_sci["Cohort"] == "SCI_P"],
            scatter=False, color="#99D8A0", line_kws={"linestyle": "--", "linewidth": 2})

# **Labels & Title**
plt.xlabel("Time Since Injury (Years)", fontsize=14, fontweight="bold")
plt.ylabel("BrainPAD", fontsize=14, fontweight="bold")
plt.title("BrainPAD vs Time Since Injury (SCI Participants)", fontsize=16, fontweight="bold")

# **Add Correlation Text**
if corr_coef is not None:
    stats_text = f"{correlation_type} r = {corr_coef:.2f}, p = {p_value:.3f}"
    plt.annotate(stats_text, xy=(0.05, 0.95), xycoords="axes fraction", fontsize=12, fontweight="bold")

# **Adjust legend**
plt.legend(title="Cohort", loc="upper right")

# **Show and Save Plot**
plt.grid(alpha=0.3)
plt.tight_layout()
plt.savefig(output_path6)

### Statistical Analysis
##BrainPAD across cohorts
def cohen_d(x, y):
    """Calculate Cohen's d for two independent samples."""
    mean_x, mean_y = np.mean(x), np.mean(y)
    pooled_std = np.sqrt(((np.std(x, ddof=1) ** 2) + (np.std(y, ddof=1) ** 2)) / 2)
    return (mean_x - mean_y) / pooled_std

# Define cohorts
cohort_order = ["control", "SCI_nNP", "SCI_P"]

# Check Normality for Entire Dataset
shapiro_p = stats.shapiro(df_pybrain["BrainPAD"].dropna())[1]  # Shapiro-Wilk test p-value
ks_p = stats.kstest(df_pybrain["BrainPAD"].dropna(), 'norm',
                    args=(df_pybrain["BrainPAD"].mean(), df_pybrain["BrainPAD"].std()))[1]  # KS Test

# Decide on Parametric vs. Non-Parametric Tests
is_normal = shapiro_p > 0.05 and ks_p > 0.05  # True = normal, False = not normal

# Store group comparisons
comparison_results = []
for group1, group2 in combinations(cohort_order, 2):
    data1 = df_pybrain[df_pybrain["Cohort"] == group1]["BrainPAD"].dropna()
    data2 = df_pybrain[df_pybrain["Cohort"] == group2]["BrainPAD"].dropna()

    # Select statistical test
    if is_normal:  # Use parametric test if the entire dataset is normal
        test_stat, p_value = stats.ttest_ind(data1, data2)
        test_used = "t-test"
        effect_size = cohen_d(data1, data2)
    else:  # Use non-parametric test otherwise
        test_stat, p_value = stats.mannwhitneyu(data1, data2)
        test_used = "Mann-Whitney U"
        effect_size, _ = cliffs_delta(data1, data2)

    # Store results
    comparison_results.append([group1, group2, test_used, p_value, effect_size])

# Convert to DataFrame
df_comparisons = pd.DataFrame(comparison_results, columns=["Group1", "Group2", "Test Used", "p-value", "Effect Size"])

# Save results to a CSV file
df_comparisons.to_csv(output_path7)

### BrainPAD acorss sex 
# Filter Data by Sex
df_female = df_pybrain[df_pybrain["Sex"] == "Female"]
df_male = df_pybrain[df_pybrain["Sex"] == "Male"]

# Females
female_results = []
for group1, group2 in combinations(cohort_order, 2):
    data1 = df_female[df_female["Cohort"] == group1]["BrainPAD"].dropna()
    data2 = df_female[df_female["Cohort"] == group2]["BrainPAD"].dropna()

    # **Use the normality check results to select the test**
    if is_normal:  # If dataset is normal â Use t-test
        test_stat, p_value = stats.ttest_ind(data1, data2)
        test_used = "t-test"
        effect_size = cohen_d(data1, data2)
    else:  # Otherwise â Use Mann-Whitney U
        test_stat, p_value = stats.mannwhitneyu(data1, data2)
        test_used = "Mann-Whitney U"
        effect_size, _ = cliffs_delta(data1, data2)

    # Store results
    female_results.append(["Female", group1, group2, test_used, p_value, effect_size])

# Males 
male_results = []
for group1, group2 in combinations(cohort_order, 2):
    data1 = df_male[df_male["Cohort"] == group1]["BrainPAD"].dropna()
    data2 = df_male[df_male["Cohort"] == group2]["BrainPAD"].dropna()

    # **Use the same test selection method**
    if is_normal:
        test_stat, p_value = stats.ttest_ind(data1, data2)
        test_used = "t-test"
        effect_size = cohen_d(data1, data2)
    else:
        test_stat, p_value = stats.mannwhitneyu(data1, data2)
        test_used = "Mann-Whitney U"
        effect_size, _ = cliffs_delta(data1, data2)

    # Store results
    male_results.append(["Male", group1, group2, test_used, p_value, effect_size])

# Convert Results to DataFrame
df_female_comparisons = pd.DataFrame(female_results, columns=["Sex", "Group1", "Group2", "Test Used", "p-value", "Effect Size"])
df_male_comparisons = pd.DataFrame(male_results, columns=["Sex", "Group1", "Group2", "Test Used", "p-value", "Effect Size"])
# Combine Female & Male Comparisons into One DataFrame*
df_sex_comparisons = pd.concat([df_female_comparisons, df_male_comparisons], ignore_index=True)

# Save Results to a CSV file
df_sex_comparisons.to_csv(output_path8)

